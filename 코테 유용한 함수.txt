-------------------------------------
@정렬
stable_sort
같은 크기의 수가 있을때 그 순서를 보존
ex) 어떤 벡터에 같은 수인 a,b가 있을때
sort는 a,b의 크기가 같으므로 랜덤하게 순서가 
바뀔 수 있지만
stable_sort는 a,b의 순서를 보존한다.
속도가 느리지만 순서를 보존해야 하는 경우 사용
-------------------------------------
@정렬
partial_sort
배열 전체를 정렬할 필요가 없을때 사용되며 예를들어
100명의 학생중 상위10명의 점수를 성적순으로 출력
하려할때 100개를 sort하고 10개를 출력하는 것 보다
전체에서 상위 10개만 정렬해서 출력하는 게 씹이득
하지만 정렬이후 원소들은 랜덤배치 되므로 조심
ex)
5 3 1 6 4 7 2
partial_sort(vec.begin(), vec.begin() + 3, vec.end());
1 2 3 / 6 5 7 4

-------------------------------------
@remove,@remove_if
remove는 특정 문자를 지워야 할 때
remove_if는 조건에 따라 지워야 할 때
 std::string str1 = "Text with some   spaces";
  // 문자열에서 띄어쓰기를 모두 지운다.
  str1.erase(std::remove(str1.begin(), str1.end(), ' '), str1.end());
  std::cout << str1 << '\n';

  std::string str2 = "Text\n with\tsome \t  whitespaces\n\n";
  // 문자열에서 공백 문자 (띄어쓰기, 개행 문자 등등)를 지운다.
  str2.erase(std::
  remove_if(str2.begin(), str2.end(),
            [](unsigned char x) { return std::isspace(x); }), // 조건
            str2.end());
-------------------------------------
@replace_if
 std::replace_if(
    s.begin(), s.end(), [](const int& i) { return i < 5; }, 55);
조건에 맞는 인덱스를 치환
-------------------------------------
@count_if
int under_20 = std::count_if(myvector.begin(), myvector.end(),
                            [](int elem) { return elem <= 20; });
                            
-------------------------------------
-------------------------------------
-------------------------------------
-------------------------------------
-------------------------------------
-------------------------------------
-------------------------------------
-------------------------------------
-------------------------------------
-------------------------------------
-------------------------------------
